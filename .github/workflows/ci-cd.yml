name: VCS Animations CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly to check for dependency issues
    - cron: '0 0 * * 0'

jobs:
  lint-and-test:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -e .
        if [ -f requirements-demo.txt ]; then pip install -r requirements-demo.txt; fi
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: black --check --diff .
    
    - name: Check import sorting with isort
      run: isort --check-only --diff .
    
    - name: Type checking with mypy
      run: mypy src/ --ignore-missing-imports || true
    
    - name: Validate Python syntax
      run: |
        python -m py_compile *.py
        find . -name "*.py" -exec python -m py_compile {} \;

  generate-animations:
    name: Generate Animation Videos
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install system dependencies for Manim
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ffmpeg \
          texlive \
          texlive-latex-extra \
          texlive-fonts-extra \
          texlive-latex-recommended \
          texlive-science \
          tipa \
          libcairo2-dev \
          libpango1.0-dev \
          libjpeg-dev \
          libgif-dev \
          librsvg2-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-demo.txt
    
    - name: Generate Best Matching Animation
      run: |
        python -m manim -pql --disable_caching Best_Matching.py FullConceptAnimation
      continue-on-error: true
    
    - name: Generate BMA Case 1 Animation
      run: |
        python -m manim -pql --disable_caching BMA_Case1.py FullConceptAnimation
      continue-on-error: true
    
    - name: Generate BMA Case 2 Animation
      run: |
        python -m manim -pql --disable_caching BMA_Case2.py FullConceptAnimation
      continue-on-error: true
    
    - name: Generate BMA Case 3 Animation
      run: |
        python -m manim -pql --disable_caching BMA_Case3.py FullConceptAnimation
      continue-on-error: true
    
    - name: Generate LAS Animation
      run: |
        python -m manim -pql --disable_caching LAS.py FullConceptAnimation
      continue-on-error: true
    
    - name: Generate NASD Animation
      run: |
        python -m manim -pql --disable_caching NASD.py FullConceptAnimation
      continue-on-error: true
    
    - name: Generate SAS Animation
      run: |
        python -m manim -pql --disable_caching SAS.py FullConceptAnimation
      continue-on-error: true
    
    - name: Generate SC Animation
      run: |
        python -m manim -pql --disable_caching SC.py FullConceptAnimation
      continue-on-error: true
    
    - name: Generate VCS Animation
      run: |
        python -m manim -pql --disable_caching VCS.py FullConceptAnimation
      continue-on-error: true
    
    - name: List generated files
      run: |
        find . -name "*.mp4" -type f -newer requirements-demo.txt || true
        ls -la media/ || true
    
    - name: Upload generated animations
      uses: actions/upload-artifact@v3
      with:
        name: generated-animations
        path: |
          media/videos/**/*.mp4
          **/*.mp4
        retention-days: 30
      continue-on-error: true

  build-package:
    name: Build and Test Package
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Test installation
      run: |
        pip install dist/*.whl
        python -c "import vcs; print('Package installed successfully')"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/
        retention-days: 7

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: bandit -r . -x "/tests/" || true
    
    - name: Check for known vulnerabilities
      run: safety check || true

  docs-preview:
    name: Documentation Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
        pip install -e .
    
    - name: Build documentation
      run: |
        cd docs/sphinx
        make html
      continue-on-error: true
    
    - name: Upload docs preview
      uses: actions/upload-artifact@v3
      with:
        name: docs-preview
        path: docs/sphinx/build/html/
        retention-days: 7
      continue-on-error: true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-package, generate-animations]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Download animations
      uses: actions/download-artifact@v3
      with:
        name: generated-animations
        path: animations/
      continue-on-error: true
    
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from vcs import __version__; print(__version__)" 2>/dev/null || echo "v$(date +%Y.%m.%d)")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        files: |
          dist/*
          animations/**/*.mp4
        body: |
          ## VCS Animation Package Release ${{ steps.get_version.outputs.version }}
          
          This release includes:
          - ðŸ“¦ Python package for VCS metrics
          - ðŸŽ¬ Generated animation videos
          - ðŸ“š Complete documentation
          
          ### Animation Files Included:
          - Best Matching Algorithm visualization
          - Block Matching Algorithm Cases 1-3
          - Line Alignment Score (LAS) demonstration
          - Narrative Alignment Score Distance (NASD) visualization
          - Semantic Alignment Score (SAS) animation
          - Segmentation Component (SC) demonstration
          - Video Comprehension Score (VCS) integration
          
          ### Installation:
          ```bash
          pip install vcs-metrics
          ```
          
          ### Usage:
          See the documentation and example scripts in the repository.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}